{"version":3,"file":"7.js","sources":["webpack:///./js/components/events/view.js"],"sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { SEARCH_EVENTS } from \"actions/events\";\nimport { Header, Segment, Statistic, Label, Button } from \"semantic-ui-react\";\nimport { LocalAttributeList } from \"attributes/list\";\nimport { NavLink } from \"react-router-dom\";\nimport { analysisToText, analysisToColour, threatLevelToText, threatLevelToColour } from \"utils\";\nimport Org from \"orgs/inline\";\nimport EditEvent from \"events/edit\";\n\n\nclass ViewEvent extends React.Component {\n    componentDidMount() {\n        this.props.searchEvents({ id: this.props.match.params.id });\n    }\n\n    render() {\n        const { events, loading } = this.props;\n        if (loading) return \"loading...\";\n\n        const event = events[0];\n\n        return (\n            <Segment inverted>\n                <Header as=\"h1\">Event {event.id}: {event.info}</Header>\n\n                <Header as=\"h4\">\n                    Created by <Org org={event.org} />\n                </Header>\n\n                <EditEvent event={event} />\n\n                <Label.Group>\n                    <Label color={event.published?\"green\":\"red\"}\n                        content={event.published?\"Published\":\"Unpublished\"}\n                    />\n                    <Label color={analysisToColour(event.analysis)}\n                        content=\"Analysis\"\n                        detail={analysisToText(event.analysis)}\n                    />\n                    <Label color={threatLevelToColour(event.threat_level_id)}\n                        content=\"Threat Level\"\n                        detail={threatLevelToText(event.threat_level_id)}\n                    />\n                </Label.Group>\n\n\n                <NavLink to={`${this.props.match.url}/attributes/add`}>\n                    <Button content=\"Add attributes\" icon=\"add\" color=\"black\"/>\n                </NavLink>\n                <LocalAttributeList attributes={event.attributes} />\n            </Segment>\n        );\n    }\n}\n\nconst mapStateToProps = ({ events: { events, loading }}) => ({\n    events, loading\n});\n\nconst mapDispatchToProps = dispatch => ({\n    searchEvents: (params) => dispatch({type: SEARCH_EVENTS, data: params})\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ViewEvent);\n"],"mappings":"AAAA","sourceRoot":""}