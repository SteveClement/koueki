{"version":3,"file":"9.js","sources":["webpack:///./js/components/attributes/new.js"],"sourcesContent":["import React from \"react\";\nimport { Form } from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\nimport { post, splitLines } from \"utils\";\nimport { toast } from \"react-toastify\";\nimport { withRouter } from \"react-router-dom\";\nimport { format_error } from \"utils\";\n\nclass CreateAttribute extends React.PureComponent {\n    state = {\n        value: \"\",\n        category: \"Network activity\",\n        type: \"ip-dst\"\n    }\n\n    onChange = (e, {name, value}) => this.setState({[name]: value})\n\n    submit = async () => {\n        const { match: { params: { id: id }}} = this.props;\n\n        const toAdd = splitLines(this.state.value).map(x => ({\n            value: x, category: this.state.category, type: this.state.type\n        }));\n\n        let resp = await post(`/v2/events/${id}/attributes/`, toAdd);\n        let json = await resp.json();\n        if (resp.status == 201) {\n            toast.success(`Added ${json.length} attributes`);\n            this.props.history.push(`/web/events/${id}`);\n        } else {\n            toast.error(`Server says: ${resp.status}`);\n            toast.error(format_error(resp));\n        }\n    }\n\n    render() {\n        return (\n            <Form inverted>\n                <Form.TextArea\n                    rows={10}\n                    name=\"value\"\n                    label=\"Value\"  \n                    value={this.state.value}\n                    placeholder=\"Values (1 per line)\"\n                    onChange={this.onChange}\n                />\n                <Form.Group>\n                    <Form.Dropdown\n                        name=\"type\"\n                        label=\"Type\"\n                        search\n                        fluid\n                        width={8}\n                        value={this.state.type}\n                        onChange={this.onChange}\n                        options={Object.keys(this.props.types).map(x => ({             \n                            text: x, value: x\n                        }))}                \n                    />\n\n                    <Form.Dropdown\n                        name=\"category\"\n                        label=\"Category\"\n                        search\n                        fluid\n                        width={8}\n                        value={this.state.category}\n                        onChange={this.onChange}\n                        options={\n                            this.props.categories\n                            .filter(x => \n                                this.props.types[this.state.type].valid_for.includes(x))\n                            .map(x => ({\n                                text: x, value: x\n                            }))\n                        }                \n                    />\n                </Form.Group>\n                <Form.Button color=\"black\" fluid onClick={this.submit} type=\"button\"\n                    content=\"Submit\" icon=\"add\" />\n            </Form>\n        );\n    }\n}\n\nconst mapStateToProps = ({ config: { types: types, categories: categories }}) => ({\n    types, categories\n});\n\nexport default withRouter(connect(mapStateToProps)(CreateAttribute));\n"],"mappings":"AAAA","sourceRoot":""}